# Record Card

The Record Card library allows records in the DB to be rendered in HTML as cards like this:

![eve record cards](http://imgur.com/a/akKOx)

It's used by the Database Explorer (also bundled with Eve), but you can also include and use it by itself. Example usage:

~~~ eve
disabled
search
  record = [#my-example-record]

bind
  [#html/div #my-cards | children:
    [#record-card/card record]]
end
~~~


## Simple Cards

Explode the AVs of simple record cards.
~~~ eve
search
  card = [#record-card/card record]
  lookup[entity: record attribute value]
bind
  card.entity += record
  card.av += [attribute value]
end
~~~

For simple cards, records are local and can be determined via lookup.
~~~ eve
search
  card = [#record-card/card record]
  attr-tile = [#record-card/attribute-tile card value]
  lookup[entity: value]
bind
  attr-tile.type += "record"
end
~~~


## Card Aliasing

Alias record name to title.
~~~ eve
search
  card = [#record-card/card av]
  title = if av.attribute = "name" then av.value else "Unitled"
bind
  card.title += title
end
~~~

Alias record tags to tag-set.
~~~ eve
search
  card = [#record-card/card av: [attribute: "tag" value]]
bind
  card.tag-set += value
end
~~~


## Card

Create a card wrapper for each record card.
~~~ eve
search
  card = [#record-card/card]

bind
  card <- [#html/element tagname: "card" children:
    [#record-card/header sort: 1 card]
    [#record-card/tag-list sort: 2 card]
    [#record-card/attribute-list sort: 3 card]]
end
~~~

## Header

The card header contains its name and relevant controls.
~~~ eve
search
  header = [#record-card/header card]
bind
  header <- [#html/element tagname: "header" children:
    [#html/element #record-card/name tagname: "h2" sort: 1 card text: card.title]
    [#ui/spacer sort: 2 ]
    [#ui/row #record-card/controls sort: 3 card]
  ]
end
~~~

## Tags

The tag list contains each tag on the record.
~~~ eve
search
  tag-list = [#record-card/tag-list card]

bind
  tag-list <- [#html/element tagname: "section" children:
    [#ui/text #record-card/tag card text: card.tag-set]]
end
~~~

## Attributes

The attribute list contains a set of attribute tiles for each attribute on the record.
~~~ eve
search
  attr-list = [#record-card/attribute-list card]
  card.av = [attribute value]
  attribute != "tag"
  attribute != "name"

bind
  attr-list <- [#html/element tagname: "content" children:
    [#record-card/attribute-tile card attribute | value]]
end
~~~

Attribute tiles contain a set of values whose display is indicated by their type.
~~~ eve
search
  attr-tile = [#record-card/attribute-tile card attribute value]
  type = if t = attr-tile.type then t else "default"

bind
  attr-tile <- [#ui/row sort: attribute children:
    [#ui/text #record-card/attribute sort: 1 attr-tile attribute text: "{{attribute}} "]
    [#record-card/value sort: "2|{{value}}" attr-tile type value]]
end
~~~

By default, values are shown as plain text.
~~~ eve
search
  attr-value = [#record-card/value type: "default" value]

bind
  attr-value <- [#ui/text text: value]
end
~~~

Record values are shown as record links.
~~~ eve
search
  attr-value = [#record-card/value type: "record" value]
  name = if n = value.name then n else value

bind
  attr-value <- [#html/a #record-card/record href: "#record-card-{{value}}" text: "{{name}}"]
end
~~~

Unnamed record links show the records tags and attributes.
~~~ eve
// search
//   attr-value = [#record-card/value type: "record" value]
//   not(value.name)

//   lookup[entity: value attribute]
//   text = if t = value.tag then "#{{t}}"
//          if attribute != "tag" then attribute

// bind
//   attr-value <- [#html/a #record-card/record href: "#record-card-{{value}}" | children:
//     [#ui/text sort: text text: "{{text}} "]]
// end
~~~
