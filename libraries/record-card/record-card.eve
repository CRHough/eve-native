# Record Card

The Record Card library allows records in the DB to be rendered in HTML as cards like this:

![eve record cards](http://imgur.com/a/akKOx)

It's used by the Database Explorer (also bundled with Eve), but you can also include and use it by itself. Example usage:

~~~ eve
disabled
search
  record = [#my-example-record]

bind
  [#html/div #my-cards | children:
    [#record-card/card record]]
end
~~~


## Simple Cards

Explode the AVs of simple record cards.
~~~ eve
search
  card = [#record-card/card record]
  lookup[entity: record attribute value]
bind
  card.entity += record
  card.av += [attribute value]
end
~~~

For simple cards, records are local and can be determined via lookup.
~~~ eve
search
  card = [#record-card/card record]
  attr-tile = [#record-card/attribute-tile card value]
  lookup[entity: value]
bind
  attr-tile.type += "record"
end
~~~


## Card Aliasing

Alias record name to title.
~~~ eve
search
  card = [#record-card/card]
  title = if t = card.title t != "Untitled" then t
          else if av = card.av av.attribute = "name" then av.value
          else "Untitled"
bind
  card.title += title
end
~~~

Alias record tags to tag-set.
~~~ eve
search
  card = [#record-card/card av: [attribute: "tag" value]]
bind
  card.tag-set += value
end
~~~


## Card

Create a card wrapper for each record card.
~~~ eve
search
  card = [#record-card/card]

bind
  card <- [#html/element tagname: "card" children:
    [#record-card/header sort: 1 card title: ""]
    [#record-card/tag-list sort: 2 card title: ""]
    [#record-card/attribute-list sort: 3 card title: ""]]
end
~~~

## Header

The card header contains its name and relevant controls.
~~~ eve
search
  header = [#record-card/header card]
bind
  header <- [#html/element tagname: "header" children:
    [#html/element #record-card/name tagname: "h2" sort: 1 card text: card.title]
    [#ui/spacer sort: 2 ]
    [#ui/row #record-card/controls sort: 3 card]
  ]
end
~~~

## Tags

The tag list contains each tag on the record.
~~~ eve
search
  tag-list = [#record-card/tag-list card]

bind
  tag-list <- [#html/element tagname: "section" children:
    [#ui/button #record-card/tag class: "flat" card text: card.tag-set]]
end
~~~

## Attributes

The attribute list contains a set of attribute tiles for each attribute on the record.
~~~ eve
search
  attr-list = [#record-card/attribute-list card]
  card.av = [attribute value]
  attribute != "tag"
  attribute != "name"

bind
  attr-list <- [#html/element tagname: "content" children:
    [#record-card/attribute-tile card attribute | value]]
end
~~~

Attribute tiles contain a set of values whose display is indicated by their type.
~~~ eve
search
  attr-tile = [#record-card/attribute-tile card attribute value]
  type = if t = attr-tile.type then t else "default"

bind
  attr-tile <- [#ui/row sort: attribute children:
    [#ui/text #record-card/attribute sort: 1 attr-tile attribute type text: "{{attribute}} "]
    [#record-card/value sort: "2|{{value}}" attr-tile type value]]
end
~~~

By default, values are shown as plain text.
~~~ eve
search
  attr-value = [#record-card/value type: "default" value]
  (text, title) = if 0 = math/mod[value by: 1] then (value, "")
                  else if fixed = math/to-fixed[value to: 3] then (fixed, value)
                  else (value, "")

bind
  attr-value <- [#ui/text text title]
end
~~~

Record values are shown as record links.
~~~ eve
search
  attr-value = [#record-card/value type: "record" value]
  title = if t = attr-value.title then t
          if n = value.name then n
          else value
bind
  attr-value <- [#ui/button #record-card/record class: "flat" text: title]
end
~~~


## Record Literal

Decorate the literal.
~~~ eve
search
  literal = [#record-card/record-literal]
bind
  literal += #html/div
end
~~~

Render tags as the first elements of the literal.
~~~ eve
search
  literal = [#record-card/record-literal av]
  av = [attribute: "tag" value]
bind
  literal.children +=
    [#ui/text #record-card/record-literal/tag literal sort: 0 text: "#{{value}}"]
end
~~~

Render other attribute sets.
~~~ eve
search
  literal = [#record-card/record-literal av]
  av = [attribute]
  attribute != "tag"
  sort = if attribute = "name" then 1 else attribute
bind
  literal.children +=
    [#ui/div literal attribute sort | children:
      [#ui/text #record-card/record-literal/attribute sort: 1 text: attribute]
      [#record-card/record-literal/value av]]
end
~~~

Decorate regular AV values.
~~~ eve
search
  literal-value = [#record-card/record-literal/value av]
  av = [attribute value change]
  not(av.type)

  type = if x = value + 1 then "number" else "string"
  (text, title) = if 0 = math/mod[value by: 1] then (value, "")
                  else if fixed = math/to-fixed[value to: 3] then (fixed, value)
                  else (value, "")
bind
  literal-value <- [#ui/text sort: "2|{{title}}|{{change}}" type change text title]
end
~~~

Decorate record AV values.
~~~ eve
search
  literal-value = [#record-card/record-literal/value av]
  av = [attribute value change type: "record" text]
bind
  literal-value <- [#ui/button #record-card/record class: "flat" sort: "2|{{text}}|{{change}}" change text value: av.value]
end
~~~
