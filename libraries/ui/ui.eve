# UI

## Deprecation Warnings

~~~ eve
search
  [#html/shortcut-tag shortcut tagname]
  not([#ui/shortcut-tag tagname])
bind
  [#ui/deprecated-shortcut-tag shortcut: "ui/{{tagname}}" new-shortcut: shortcut tagname]
end
~~~

Report deprecated shortcuts as warnings.
~~~ eve
search
  [#ui/deprecated-shortcut-tag shortcut: tag new-shortcut tagname]
  element = [tag]
bind
  [#eve/warning #ui/warning #eve/deprecated message: "The shortcut tag '#{{tag}}' for creating basic HTML elements has been deprecated. Instead, use '#{{new-shortcut}}'."]
  element <- [#html/element tagname]
end
~~~

## Shortcut Tags

~~~ eve
commit
  [#ui/shortcut-tag shortcut: "ui/row" tagname: "row"]
  [#ui/shortcut-tag shortcut: "ui/column" tagname: "column"]
  [#ui/shortcut-tag shortcut: "ui/spacer" tagname: "spacer"]
  [#ui/shortcut-tag shortcut: "ui/text" tagname: "text"]
  [#ui/shortcut-tag shortcut: "ui/button" tagname: "button"]
  [#ui/shortcut-tag shortcut: "ui/input" tagname: "input"]
end
~~~

Decorate shortcut elements as html.
~~~ eve
search
  [#ui/shortcut-tag shortcut: tag tagname]
  element = [tag]
bind
  element <- [#html/element tagname]
end
~~~

## List

Decorate list as html.
~~~ eve
search
  list = [#ui/list]
bind
  list <- [#html/element tagname: "div"]
end
~~~

Drop items into list (will eventually be flywheel'd).
~~~ eve
search
  list = [#ui/list item]
bind
  list.children += item
end
~~~

## Selectable

Selectables are focusable.
~~~ eve
search
  selectable = [#ui/selectable]
  i = if t = selectable.tabindex then t else 0
bind
  selectable.tabindex += i
end
~~~

The default cursor for a selectable list is the first item.
~~~ eve
search
  selectable = [#ui/selectable item]
  not(selectable.cursor)
  gather/bottom[for: item.sort per: selectable limit: 1]
commit
  selectable.cursor := item
end
~~~

Selectable items are sorted by autosort if they don't specify a sort.
~~~ eve
search
  selectable = [#ui/selectable item]
  sort = if s = item.sort then s else item.eve-auto-index
bind
  item.sort += sort
end
~~~

Build a linked list of the items in the selectable for navigation.
~~~ eve
search
  selectable = [#ui/selectable item]
  (next-sort next) = gather/next[for: (item.sort item) per: selectable]
bind
  item.next-selectable-item += next
  next.prev-selectable-item += item
end
~~~

Mark the currently selected element.
~~~ eve
search
  [#ui/selectable selected]
bind
  selected += #ui/selected
end
~~~

Mark the cursor element.
~~~ eve
search
  [#ui/selectable #ui/focused cursor]
bind
  cursor += #ui/current
end
~~~


### Handlers

Mark focused selectables.
~~~ eve
search
  selectable = [#ui/selectable]
  [#html/event/focus element: selectable]
bind
  [#ui/event/focus selectable]
end
~~~

Clicking an item in a selectable selects it.
~~~ eve
search
  selectable = [#ui/selectable item]
  [#html/event/click element: item]
bind
  [#ui/event/select selectable item]
end
~~~

Clicking outside a focused selectable blurs it.
~~~ eve
search
  selectable = [#ui/selectable #ui/focused]
  // [#html/event/click]
  // not([#html/event/click element: selectable])
  [#html/event/blur element: selectable]
bind
  [#ui/event/blur selectable]
end
~~~

Escape or tab in a focused selectable blurs it.
~~~ eve
search
  selectable = [#ui/selectable #ui/focused]
  event = if e = [#html/event/key-down key: "escape"] then e
  if e = [#html/event/key-down key: "tab"] then e
  if e = [#html/event/key-down key: "enter"] then e
commit
  selectable += #html/trigger/blur
end
~~~

Enter in a focused selectable selects its cursor.
~~~ eve
search
  selectable = [#ui/selectable #ui/focused cursor:item]
  [#html/event/key-down key: "enter"]
bind
  [#ui/event/select selectable item]
end
~~~

Down in a focused selectable advances the cursor.
~~~ eve
search
  selectable = [#ui/selectable #ui/focused cursor]
  event = [#html/event/key-down key: "down"]
commit
  selectable.cursor := cursor.next-selectable-item
end
~~~

Up in a focused selectable retreats the cursor.
~~~ eve
search
  selectable = [#ui/selectable #ui/focused cursor]
  [#html/event/key-down key: "up"]
commit
  selectable.cursor := cursor.prev-selectable-item
end
~~~


### Events

Focusing a selectable selectable marks it focused.
~~~ eve
search
  [#ui/event/focus selectable]
commit
  selectable += #ui/focused
  selectable -= #html/trigger/focus
end
~~~

Blurring a selectable removes its focused status.
~~~ eve
search
  [#ui/event/blur selectable]
commit
  selectable -= #ui/focused
  selectable -= #html/trigger/blur
end
~~~

Selecting an element updates the selected and cursor.
~~~ eve
search
  [#ui/event/select selectable item]
commit
  selectable.selected += item
  selectable.cursor := item
  selectable += #ui/selecting
end
~~~

In a single-selectable selectable, selection overwrites the previous selected.
~~~ eve
search
  [#ui/event/select selectable item]
  selectable = [#ui/single-selectable]
commit
  selectable.selected := item
end
~~~

### Dropdown

Decorate dropdown as html.
~~~ eve
search
  dropdown = [#ui/dropdown]
bind
  dropdown <- [#html/element tagname: "div"]
end
~~~

A dropdown's first child is its input.
~~~ eve
search
  dropdown = [#ui/dropdown input]
bind
  dropdown.children += input
  input.sort += 1
end
~~~

A dropdown creates a selectable list of its items.
~~~ eve
search
  dropdown = [#ui/dropdown item]
bind
  dropdown.children += [#ui/dropdown/list #ui/list #ui/selectable #ui/single-selectable dropdown sort: 999999 | item]
end
~~~

A dropdown's selected is its list's
~~~ eve
search
  [#ui/dropdown/list dropdown selected]
bind
  dropdown.selected += selected
end
~~~


### Handlers

Clicking a dropdown opens it.
~~~ eve
search
  dropdown = [#ui/dropdown]
  [#html/event/click element: dropdown]
bind
  [#ui/event/open dropdown]
end
~~~

Clicking anywhere outside an open dropdown closes it.
~~~ eve
search
  dropdown = [#ui/dropdown]
  [#html/event/click]
  not([#html/event/click element: dropdown])
bind
  [#ui/event/close dropdown]
end
~~~

Blurring a dropdown's list closes it.
~~~ eve
search
  [#ui/event/blur selectable: [#ui/dropdown/list dropdown]]
bind
  [#ui/event/close dropdown]
end
~~~

Focusing the list of a closed dropdown opens it.
~~~ eve
search
  [#ui/event/focus selectable: [#ui/dropdown/list dropdown]]
  not(dropdown = [#ui/open])
bind
  [#ui/event/open dropdown]
end
~~~


### Events

Opening a dropdown marks it as open.
~~~ eve
search
  [#ui/event/open dropdown]
  list = [#ui/dropdown/list dropdown]
commit
  dropdown += #ui/open
  list += #html/trigger/focus
  list -= #html/trigger/blur
end
~~~

Closing a dropdown removes its open tag.
~~~ eve
search
  [#ui/event/close dropdown]
  list = [#ui/dropdown/list dropdown]
commit
  dropdown -= #ui/open
  list -= #html/trigger/focus
  list += #html/trigger/blur
end
~~~


## Buttons

Give button elements icons if specified.
~~~ eve
search
  element = [#ui/button icon]
bind
  element.class += "iconic"
  element.class += "ion-{{icon}}"
end
~~~

## Toggle

A toggle is a checkbox and a label decorated as a toggle switch..
~~~ eve
search
  element = [#ui/toggle]
bind
  element <- [#html/div children:
    [#html/element tagname: "label" for: "ui-toggle-{{element}}"]
    [#html/input #ui/toggle/input type: "checkbox" id: "ui-toggle-{{element}}"]]
end
~~~

Copy checked from input to toggle.
~~~ eve
search
  element = [#ui/toggle children: [#ui/toggle/input checked]]

bind
  element.checked += checked
end
~~~

Copy initial from toggle to input.
~~~ eve
search
  element = [#ui/toggle initial children: input]
  input = [#ui/toggle/input]

bind
  input.initial += initial
end
~~~


## Autocomplete

### Setup

Decorate autocompletes.
~~~ eve
search
  autocomplete = [#ui/autocomplete]
bind
  autocomplete <- [#ui/column children:
    [#ui/input #ui/autocomplete/input sort: 1 autocomplete]
    [#ui/column #ui/autocomplete/matches sort: 2 autocomplete]]
end
~~~

Copy input placeholder.
~~~ eve
search
  input = [#ui/autocomplete/input autocomplete]
bind
  input.placeholder += autocomplete.placeholder
end
~~~

Copy input initial.
~~~ eve
search
  input = [#ui/autocomplete/input autocomplete]
bind
  input.initial += autocomplete.initial
end
~~~

Copy trigger focus.
~~~ eve
search
  autocomplete = [#ui/autocomplete #html/event/trigger-focus]
  input = [#ui/autocomplete/input autocomplete]
bind
  input += #html/event/trigger-focus
end
~~~

Copy autosize input.
~~~ eve
search
  autocomplete = [#ui/autocomplete #html/autosize-input]
  input = [#ui/autocomplete/input autocomplete]
bind
  input += #html/autosize-input
end
~~~

An autocomplete's value is its input's.
~~~ eve
search
  input = [#ui/autocomplete/input autocomplete]
  value = if v = input.value then v else ""
bind
  autocomplete.value += value
end
~~~

An autocomplete uses a custom-specified needle as the search term if provided, otherwise its current value.
~~~ eve
search
  autocomplete = [#ui/autocomplete]
  term = if n = autocomplete.needle then n else autocomplete.value
bind
  autocomplete.term += term
end
~~~


If an autocomplete's value disagrees with its selected, clear the selected.
~~~ eve
search
  autocomplete = [#ui/autocomplete term selected]
  selected.text != term
commit
  autocomplete.selected := none
end
~~~

Completions that match the current input value are matches.
~~~ eve
search
  autocomplete = [#ui/autocomplete term completion]
  string/index-of[text: completion.text substring: string/lowercase[text: term]]
bind
  autocomplete.match += completion
end
~~~

Matches are sorted by length.
~~~ eve
search
  autocomplete = [#ui/autocomplete match]
  sort = string/length[text: match.text]
bind
  match.sort += sort
end
~~~

Show the matches in a popout beneath the input.
~~~ eve
search
  autocomplete = [#ui/autocomplete match]
  matches = [#ui/autocomplete/matches autocomplete]
bind
  matches.children += match
  match <- [#ui/autocomplete/match #ui/text autocomplete]
end
~~~

### Interaction

Clicking a match updates the selected and value of the autocomplete.
~~~ eve
search
  match = [#ui/autocomplete/match autocomplete]
  [#html/event/mouse-down element: match]
commit
  [#ui/event/select autocomplete selected: match]
end
~~~

Focusing an autocomplete input opens it.
~~~ eve
search
  input = [#ui/autocomplete/input autocomplete]
  [#html/event/focus element: input]
commit
  [#ui/event/open autocomplete]
end
~~~

Blurring an autocomplete input opens it.
~~~ eve
search
  input = [#ui/autocomplete/input autocomplete]
  [#html/event/blur element: input]
commit
  [#ui/event/close autocomplete]
end
~~~

If the value matches perfectly on blur, select that match.
~~~ eve
search
  input = [#ui/autocomplete/input autocomplete]
  [#html/event/blur element: input value]
  match = autocomplete.match
  lower = string/lowercase[text: match.text]
  lower = string/lowercase[text: value]
commit
  [#ui/event/select autocomplete selected: match]
end
~~~

Pressing escape in an open autocomplete closes it.
~~~ eve
search
  [#ui/autocomplete open: "true"]
  [#html/event/key-down key: "escape" element: autocomplete]
commit
  [#ui/event/close autocomplete]
end
~~~

Pressing enter in an open autocomplete submits it.
~~~ eve
search
  [#ui/autocomplete open: "true"]
  [#html/event/key-down key: "enter" element: autocomplete]
commit
  [#ui/event/submit autocomplete]
  [#ui/event/close autocomplete]
end
~~~

Pressing tab in an open autocomplete submits it.
~~~ eve
// search
//   [#ui/autocomplete open: "true" match]
//   [#html/event/key-down key: "tab" element: autocomplete]
//   1 == gather/sort[for: match.sort per: autocomplete]
// commit
//   [#ui/event/select autocomplete selected: match]
//   [#ui/event/close autocomplete]
// end
~~~

### Events

Clear the specified autocomplete.
~~~ eve
search
  event = [#ui/event/clear autocomplete]
  input = [#ui/autocomplete/input autocomplete]
commit
  input.value := none
  event := none
end
~~~

When an autocomplete is opened, store its previous value.
~~~ eve
search
  event = [#ui/event/open autocomplete]
  input = [#ui/autocomplete/input autocomplete]
  value = if v = input.value then v else ""
commit
  autocomplete.open := "true"
  autocomplete.previous := value
  input -= #html/trigger/blur
  event := none
end
~~~

When an autocomplete is closed, erase its previous value.
~~~ eve
search
  event = [#ui/event/close autocomplete]
  input = [#ui/autocomplete/input autocomplete]
commit
  autocomplete.open := none
  autocomplete.previous := none
  input += #html/trigger/blur
  input -= #html/trigger/focus
  event := none
end
~~~

When an autocomplete is closed and its value is changed, emit a change event.
~~~ eve
search
  event = [#ui/event/close autocomplete]
  autocomplete.value != autocomplete.previous
commit
  [#ui/event/change autocomplete value: autocomplete.value]
end
~~~

When a selection is made that differs from the previous value, emit a change event.
~~~ eve
search
  event = [#ui/event/select autocomplete selected]
  selected.text != autocomplete.previous
commit
  [#ui/event/change autocomplete value: selected.text]
end
~~~


Selecting a completion updates the autocomplete if you aren't using a custom needle.
~~~ eve
search
  event = [#ui/event/select autocomplete selected]
  input = [#ui/autocomplete/input autocomplete]
  not(autocomplete.needle)
commit
  input.value := selected.text
  autocomplete.selected := selected
  event := none
end
~~~

Clear the autocomplete change event.
~~~ eve
search
  event = [#ui/event/change autocomplete]
commit
  event := none
end
~~~




Todo:
- [x] Toggle
- [x] List
- [x] Dropdown
  - *bug* commit removal not working for enter / click (blurs list -> closes dropdown)
  - *bug* gather/bottom filtering randomly (always includes correct answer + optionally any others in set).
- [ ] Tab Box
- [ ] Rewrite AC on Dropdown
  - input
  - list (navigable)
- [ ] container
  - card
- [ ] progress
- [ ] Tree
- [ ] chip
- [ ] date picker
- [ ] time picker
- [ ] dialog
