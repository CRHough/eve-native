# UI

## Deprecation Warnings

~~~ eve
search
  [#html/shortcut-tag shortcut tagname]
  not([#ui/shortcut-tag tagname])
bind
  [#ui/deprecated-shortcut-tag shortcut: "ui/{{tagname}}" new-shortcut: shortcut tagname]
end
~~~

Report deprecated shortcuts as warnings.
~~~ eve
search
  [#ui/deprecated-shortcut-tag shortcut: tag new-shortcut tagname]
  element = [tag]
bind
  [#eve/warning #ui/warning #eve/deprecated message: "The shortcut tag '#{{tag}}' for creating basic HTML elements has been deprecated. Instead, use '#{{new-shortcut}}'."]
  element <- [#html/element tagname]
end
~~~


## Shortcut Tags

~~~ eve
commit
  [#ui/shortcut-tag shortcut: "ui/row" tagname: "row"]
  [#ui/shortcut-tag shortcut: "ui/column" tagname: "column"]
  [#ui/shortcut-tag shortcut: "ui/spacer" tagname: "spacer"]
  [#ui/shortcut-tag shortcut: "ui/text" tagname: "text"]
  [#ui/shortcut-tag shortcut: "ui/button" tagname: "button"]
  [#ui/shortcut-tag shortcut: "ui/input" tagname: "input"]
end
~~~

Decorate shortcut elements as html.
~~~ eve
search
  [#ui/shortcut-tag shortcut: tag tagname]
  element = [tag]
bind
  element <- [#html/element tagname]
end
~~~


## General Setup

Clear ui events.
~~~ eve
search
  event = [#ui/event]
commit
  event := none
end
~~~

Translate bubble event names to event tags.
~~~ eve
search
  bubble = [#ui/bubble-event event: name]
bind
  bubble.event-tag += "ui/event/{{name}}"
end
~~~

Bubble ui events.
~~~ eve
search
  event = [#ui/event tag: event-tag element: from]
  [#ui/bubble-event event-tag from to]
bind
  event.element += to
end
~~~

Translate state/start/stop event names to event tags.
~~~ eve
search
  transition = [#ui/state-tag state start-event stop-event]
bind
  transition.state-tag += "ui/{{state}}"
  transition.start-tag += "ui/event/{{start-event}}"
  transition.stop-tag += "ui/event/{{stop-event}}"
end
~~~

Apply state when start-event occurs.
~~~ eve
search
  [#ui/event tag: start-tag element: for]
  [#ui/state-tag for state-tag start-tag]
commit
  for.tag += state-tag
end
~~~

Remove state when stop-event occurs.
~~~ eve
search
  [#ui/event tag: stop-tag element: for]
  [#ui/state-tag for state-tag stop-tag]
commit
  for.tag -= state-tag
end
~~~


## Buttons

Give button elements icons if specified.
~~~ eve
search
  element = [#ui/button icon]
bind
  element.class += "iconic"
  element.class += "ion-{{icon}}"
end
~~~


## Toggle

A toggle is a checkbox and a label decorated as a toggle switch.
~~~ eve
search
  element = [#ui/toggle]
bind
  element <- [#html/div children:
    [#html/element tagname: "label" for: "ui-toggle-{{element}}"]
    [#html/input #ui/toggle/input type: "checkbox" id: "ui-toggle-{{element}}"]]
end
~~~

Copy checked from input to toggle.
~~~ eve
search
  element = [#ui/toggle children: [#ui/toggle/input checked]]

bind
  element.checked += checked
end
~~~

Copy initial from toggle to input.
~~~ eve
search
  element = [#ui/toggle initial children: input]
  input = [#ui/toggle/input]

bind
  input.initial += initial
end
~~~


## List

Decorate list as html.
~~~ eve
search
  list = [#ui/list]
bind
  list <- [#html/element tagname: "div"]
end
~~~

Drop items into list (will eventually be flywheel'd).
~~~ eve
search
  list = [#ui/list item]
bind
  list.children += item
end
~~~

## Selectable

The default cursor for a selectable list is the first item.
~~~ eve
search
  selectable = [#ui/selectable item]
  not(selectable.cursor)
  gather/bottom[for: item.sort per: selectable limit: 1]
commit
  selectable.cursor := item
end
~~~

If the cursor is no longer an item, clear it.
~~~ eve
search
  selectable = [#ui/selectable cursor]
  not(selectable = [#ui/selectable item: cursor])
commit
  selectable.cursor := none
end
~~~

Selectable items are sorted by autosort if they don't specify a sort.
~~~ eve
search
  selectable = [#ui/selectable item]
  sort = if s = item.sort then s else item.eve-auto-index
bind
  item.sort += sort
end
~~~

Build a linked list of the items in the selectable for navigation.
~~~ eve
search
  selectable = [#ui/selectable item]
  (next-sort next) = gather/next[for: (item.sort item) per: selectable]
bind
  item.next-selectable-item += next
  next.prev-selectable-item += item
end
~~~

Mark the currently selected element.
~~~ eve
search
  [#ui/selectable selected]
bind
  selected += #ui/selected
end
~~~

Mark the cursor element.
~~~ eve
search
  [#ui/selectable #ui/active cursor]
bind
  cursor += #ui/current
end
~~~

A focused selectable is active.
~~~ eve
search
  selectable = [#ui/selectable #html/focused]
bind
  selectable += #ui/active
end
~~~


### Handlers

If a selectable is focused by the client, activate it.
~~~ eve
search
  selectable = [#ui/selectable]
  [#html/event/focus element: selectable]
bind
  [#ui/event #ui/event/activate element: selectable]
end
~~~

If a selectable is blurred by the client, deactivate it.
~~~ eve
search
  selectable = [#ui/selectable]
  [#html/event/blur element: selectable]
bind
  [#ui/event #ui/event/deactivate element: selectable]
end
~~~

Clicking an item in a selectable selects the item.
~~~ eve
search
  selectable = [#ui/selectable item]
  [#html/event/mouse-down element: item]
bind
  [#ui/event #ui/event/select element: selectable item]
end
~~~

Clicking outside an active selectable deactivates it.
@FIXME: This just won't work :( It clashes when used as a subcomponent.
~~~ eve
// search
//   selectable = [#ui/selectable #ui/active]
//   [#html/event/click]
//   container = if c = selectable.container then c else selectable
//   not([#html/event/click element: container])
// bind
//   [#ui/event #ui/event/deactivate element: selectable]
// end
~~~

Escape or tab in a active selectable deactivates it.
~~~ eve
search
  selectable = [#ui/selectable #ui/active]
  event = if e = [#html/event/key-down key: "escape"] then e
  if e = [#html/event/key-down key: "tab"] then e
  if e = [#html/event/key-down key: "enter"] then e
bind
  [#ui/event #ui/event/deactivate element: selectable]
end
~~~

Enter in a active selectable selects its cursor.
~~~ eve
search
  selectable = [#ui/selectable #ui/active cursor:item]
  [#html/event/key-down key: "enter"]
bind
  [#ui/event #ui/event/select element: selectable item]
end
~~~

Down in a active selectable advances the cursor.
~~~ eve
search
  selectable = [#ui/selectable #ui/active cursor]
  event = [#html/event/key-down key: "down"]
commit
  selectable.cursor := cursor.next-selectable-item
end
~~~

Up in a active selectable retreats the cursor.
~~~ eve
search
  selectable = [#ui/selectable #ui/active cursor]
  [#html/event/key-down key: "up"]
commit
  selectable.cursor := cursor.prev-selectable-item
end
~~~


### Events

Describe selectable states.
~~~ eve
search
  selectable = [#ui/selectable]
bind
  [#ui/state-tag for: selectable state: "active" start-event: "activate" stop-event: "deactivate"]
end
~~~

Selecting an element updates the selected and cursor.
~~~ eve
search
  event = [#ui/event/select element: selectable item]
commit
  selectable.selected += item
  selectable.cursor := item
end
~~~

In a single-selectable selectable, selection overwrites the previous selected.
~~~ eve
search
  event = [#ui/event/select element: selectable item]
  selectable = [#ui/single-selectable]
commit
  selectable.selected := item
end
~~~

Clearing a selectable clears its selected.
~~~ eve
search
  event = [#ui/event/clear element: selectable]
commit
  selectable.selected := none
end
~~~


### Dropdown

Decorate dropdown as html.
~~~ eve
search
  dropdown = [#ui/dropdown]
bind
  dropdown <- [#html/element tagname: "div"]
end
~~~

A dropdown's first child is its input.
~~~ eve
search
  dropdown = [#ui/dropdown input]
bind
  dropdown.children += input
  input.sort += 1
end
~~~

A dropdown creates a selectable list of its items.
~~~ eve
search
  dropdown = [#ui/dropdown item]
bind
  dropdown.children += [#ui/dropdown/list #ui/list #ui/selectable #ui/single-selectable dropdown container: dropdown sort: 999999 | item]
end
~~~

A dropdown's selected is its list's
~~~ eve
search
  [#ui/dropdown/list dropdown selected]
bind
  dropdown.selected += selected
end
~~~


### Handlers

Clicking a dropdown opens it.
~~~ eve
search
  dropdown = [#ui/dropdown]
  not(dropdown = [#ui/active])
  [#html/event/click element: dropdown]
bind
  [#ui/event #ui/event/activate element: dropdown]
end
~~~

Clicking anywhere outside an open dropdown closes it.
~~~ eve
search
  dropdown = [#ui/dropdown #ui/active]
  [#html/event/click]
  not([#html/event/click element: dropdown])
bind
  [#ui/event #ui/event/deactivate element: dropdown]
end
~~~


### Events

Describe dropdown event bubbling and states.
~~~ eve
search
  dropdown = [#ui/dropdown input]
  list = [#ui/dropdown/list dropdown]
bind
  [#ui/bubble-event from: dropdown to: list event: ("activate" "deactivate" "clear" "select")]
  [#ui/bubble-event from: list to: dropdown event: ("activate" "deactivate" "clear" "select")]
  [#ui/state-tag for: dropdown state: "active" start-event: "activate" stop-event: "deactivate"]
end
~~~

Opening a button-based dropdown blurs the button.
~~~ eve
search
  [#ui/event/activate element: dropdown]
  dropdown.input.tagname = "button"
commit
  dropdown.input += #html/trigger/blur
end
~~~


## Completer

Decorate completer.
~~~ eve
search
  completer = [#ui/completer]
bind
  completer <- [#ui/dropdown input:
    [#ui/input #ui/completer/input completer]]
end
~~~


### Setup

Copy input placeholder.
~~~ eve
search input = [#ui/completer/input completer]
bind   input.placeholder += completer.placeholder
end
~~~

Copy input initial.
~~~ eve
search input = [#ui/completer/input completer]
bind   input.initial += completer.initial
end
~~~

A completer's value is its input's.
~~~ eve
search
  completer = [#ui/completer]
  value = if [#ui/completer/input completer value: v] then v else ""
bind
  completer.value += value
end
~~~


### Handlers

Focusing the completer opens the dropdown.
~~~ eve
search
  input = [#ui/completer/input completer]
  [#html/event/focus element: input]
bind
  [#ui/event #ui/event/activate element: completer]
end
~~~

Blurring the completer closes the dropdown.
~~~ eve
search
  input = [#ui/completer/input completer]
  [#html/event/blur element: input]
bind
  [#ui/event #ui/event/deactivate element: completer]
end
~~~

Changing the completer moves the cursor to the top of the list.
~~~ eve
search
  completer = [#ui/completer #ui/active item]
  list = [#ui/dropdown/list dropdown: completer]

  [#html/event/change element: [#ui/completer/input completer]]
  gather/bottom[for: item.sort per: list limit: 1]
commit
  list.cursor := item
end
~~~


### Events

Closing a completer blurs it.
~~~ eve
search
  [#ui/event/deactivate element: completer]
  completer = [#ui/completer input]
commit
  input += #html/trigger/blur
end
~~~

Opening a completer focuses it.
~~~ eve
search
  [#ui/event/activate element: completer]
  completer = [#ui/completer input]
commit
  input += #html/trigger/focus
end
~~~


## Autocomplete

Decorate autocomplete
~~~ eve
search
  completer = [#ui/autocomplete]
bind
  completer <- [#ui/completer]
end
~~~

### Logic

If an autocomplete's value disagrees with its selected, clear the selected.
~~~ eve
search
  completer = [#ui/autocomplete value: term selected]
  selected.text != term
commit
  [#ui/event #ui/event/clear element: completer]
end
~~~

Completions that match the current input value are matches, sorted by length.
~~~ eve
search
  completer = [#ui/autocomplete value: term completion]
  ix = string/index-of[text: completion.text substring: string/lowercase[text: term]]
  sort = string/length[text: completion.text]
bind
  completer.item += completion
  completion.sort += "{{sort}}{{completion.text}}"
end
~~~

### Handlers

If the value matches perfectly on blur, select that match.
~~~ eve
search
  input = [#ui/completer/input completer]
  completer = [#ui/autocomplete]
  [#html/event/blur element: input value]
  match = completer.item
  lower = string/lowercase[text: match.text]
  lower = string/lowercase[text: value]
bind
  [#ui/event #ui/event/select element: completer item: match]
end
~~~

Autocompletes update their values on select.
~~~ eve
search
  autocomplete = [#ui/autocomplete input]
  [#ui/event/select item element: autocomplete]
commit
  input.value := item.text
end
~~~


### Events

Clear the specified autocomplete.
~~~ eve
search
  event = [#ui/event/clear element: autocomplete]
  input = [#ui/autocomplete/input autocomplete]
commit
  input.value := none
end
~~~

When an autocomplete is opened, store its previous value.
~~~ eve
search
  event = [#ui/event/activate element: autocomplete]
  input = [#ui/autocomplete/input autocomplete]
  value = if v = input.value then v else ""
commit
  autocomplete.previous := value
end
~~~

When an autocomplete is closed, erase its previous value.
~~~ eve
search
  event = [#ui/event/deactivate element: autocomplete]
  input = [#ui/autocomplete/input autocomplete]
commit
  autocomplete.previous := none
end
~~~

When an autocomplete is closed and its value is changed, emit a change event.
~~~ eve
search
  event = [#ui/event/deactivate element: autocomplete]
  autocomplete.value != autocomplete.previous
commit
  [#ui/event #ui/event/change element: autocomplete value: autocomplete.value]
end
~~~

When a selection is made that differs from the previous value, emit a change event.
~~~ eve
search
  event = [#ui/event/select element: autocomplete item]
  item.text != autocomplete.previous
commit
  [#ui/event #ui/event/change element: autocomplete value: item.text]
end
~~~


## Token Completer

Token completers are completers.
~~~ eve
search
  completer = [#ui/token-completer]
bind
  completer <- [#ui/completer #html/listener/key | captured-key: ("space" "up" "down")]
end
~~~

Token items are divs.
~~~ eve
search
  completer = [#ui/token-completer item]
bind
  item += #html/div
end
~~~


### Logic

The current term is the last word of the value.
~~~ eve
search
  completer = [#ui/token-completer value]
  (token, 1) = eve-internal/string/split-reverse[text: value by: " "]
bind
  completer.needle += token
end
~~~

Completions that match the current input value are matches, sorted by length.
~~~ eve
search
  completer = [#ui/token-completer needle: term completion]
  ix = string/index-of[text: string/lowercase[text: completion.text] substring: string/lowercase[text: term]]
  sort = string/length[text: completion.text]
bind
  completer.item += completion
  completion.sort += "{{sort}}{{completion.text}}"
end
~~~

Space-separated words are tokens of the completer.
~~~ eve
search
  completer = [#ui/token-completer value]
  (token, ix) = string/split[text: value by: " "]
bind
  completer.token += [#ui/token-completer/token token ix]
end
~~~

Track the index of the last token.
~~~ eve
search
  completer = [#ui/token-completer token: [ix]]
  gather/top[for: ix per: completer limit: 1]
bind
  completer.last-ix += ix
end
~~~

### Handlers

Token completers append the new completed token in place of the in progress token on select.
~~~ eve
search
  event = [#ui/event/select element: completer item]
  input = [#ui/completer/input completer]
  completer = [#ui/token-completer needle]
  needle != ""
  needle-start = 0 - string/length[text: needle]
  value = string/substring[text: input.value from: 1 to: needle-start]
commit
  input.value := "{{value}}{{item.text}} "
end
~~~

Token completers without an in-progress token just append the new one.
~~~ eve
search
  event = [#ui/event/select element: completer item]
  input = [#ui/completer/input completer]
  completer = [#ui/token-completer needle: ""]
commit
  input.value := "{{completer.value}}{{item.text}} "
end
~~~

Space in a active selectable selects its cursor.
~~~ eve
search
  completer = [#ui/token-completer #ui/active]
  list = [#ui/dropdown/list dropdown: completer cursor:item]
  [#html/event/key-up key: "space"]
bind
  [#ui/event #ui/event/select element: list item]
end
~~~


## Token Input

Decorate the input.
~~~ eve
search
  token-input = [#ui/token-input]
bind
  token-input <- [#ui/row children:
    [#ui/token-input/token-list #ui/row token-input]
    [#ui/token-input/input #ui/input token-input]]
end
~~~

If the token-input has a submit-key, capture it.
~~~ eve
search
  token-input = [#ui/token-input submit-key]
  input = [#ui/token-input/input token-input]
bind
  input <- [#html/listener/key captured-key: submit-key]
end
~~~

A token input's value is its inputs.
~~~ eve
search
  [#ui/token-input/input token-input value]
bind
  token-input.value += value
end
~~~


Add completed tokens to the token list.
~~~ eve
search
  token-list = [#ui/token-input/token-list token-input: [token]]
bind
  token-list.children +=
    [#html/div #ui/token-input/token token | text: token.text sort: token.sort]
end
~~~

If the token input deactivates, clear its current.
~~~ eve
search
  token-input = [#ui/token-input current]
  not(token-input = [#ui/active])
commit
  token-input.current := none
end
~~~

If the input ceases being empty, clear the current.
~~~ eve
search
  input = [#ui/token-input/input token-input value != ""]
commit
  token-input.current := none
end
~~~

if the current token is no longer legal, clear it.
~~~ eve
search
  token-input = [#ui/token-input current]
  not(current = token-input.token)
commit
  token-input.current := none
end
~~~


Mark the current token.
~~~ eve
search
  [#ui/token-input current]
  elem = [#ui/token-input/token token: current]
bind
  elem += #ui/current
end
~~~

If the input has any tokens, add a clear button.
~~~ eve
search
  token-input = [#ui/token-input token]
bind
  token-input.children += [#ui/button #ui/token-input/clear token-input | sort: 3 class: "flat" icon: "close-round"]
end
~~~


### Handlers

Clicking the clear button clears the token input.
~~~ eve
search
  [#html/event/click element: [#ui/token-input/clear token-input]]
commit
  token-input.token := none
  token-input.current := none
end
~~~


When the input is focused, activate the token input.
~~~ eve
search
  [#html/event/focus element: [#ui/token-input/input token-input]]
commit
  token-input += #ui/active
end
~~~

When the input is blurred, deactivate the token input.
~~~ eve
search
  [#html/event/blur element: [#ui/token-input/input token-input]]
commit
  token-input -= #ui/active
end
~~~

If a user presses the submit key, consume the input as a token.
~~~ eve
search
  [#html/event/key-down key]
  token-input = [#ui/token-input submit-key: key]
  input = [#ui/token-input/input token-input value]
  value != ""
  sort = if token = token-input.token
            gather/top[for: token.sort per: token-input limit: 1]
            then token.sort + 1
            else 1
commit
  token-input.token += [token-input text: value sort]
  input.value := ""
end
~~~

If a bunch of tokens are pasted from the clipboard, consume them.
~~~ eve
search
  input = [#ui/token-input/input token-input value]
  string/contains[text: value substring: token-input.separator]
  (text, ix) = string/split[text: value by: token-input.separator]
  offset = if token = token-input.token
              gather/top[for: token.sort per: token-input limit: 1]
              then token.sort
           else 0
commit
  token-input.token += [token-input text sort: ix + offset]
  input.value := ""
end
~~~

If the input is empty, select the newest token.
~~~ eve
search
  [#html/event/key-down key: "left"]
  input = [#ui/token-input/input token-input value: ""]
  token-input = [#ui/active token]
  not(token-input.current)
  gather/top[for: token.sort per: token-input limit: 1]
commit
  token-input.current := token
end
~~~

if the last token is selected and the user moves right, clear current.
~~~ eve
search
  [#html/event/key-down key: "right"]
  token-input = [#ui/token-input #ui/active current token]
  not(gather/next[for: token.sort per: token-input from: current.sort])
commit
  token-input.current := none
end
~~~

If the user navigates left, move the current.
~~~ eve
search
  [#html/event/key-down key: "left"]
  token-input = [#ui/token-input current token]
  (_, prev) = gather/previous[for: (token.sort token) from: (current.sort current)]
commit
  token-input.current := prev
end
~~~

If the user navigates left, move the current.
~~~ eve
search
  [#html/event/key-down key: "right"]
  token-input = [#ui/token-input current token]
  (_, next) = gather/next[for: (token.sort token) from: (current.sort current)]
commit
  token-input.current := next
end
~~~

If the user presses delete with a token currently selected, delete it.
~~~ eve
search
  if [#html/event/key-down key: "backspace"] then "true"
  if [#html/event/key-down key: "delete"] then "true"
  token-input = [#ui/token-input current]
commit
  token-input.token -= current
  token-input.current -= current
end
~~~

Choose the nearest token to the current to select when deleting.
If this fails, than the last token will be selected, which is the appropriate choice.
~~~ eve
search
  if [#html/event/key-down key: "backspace"] then "true"
  if [#html/event/key-down key: "delete"] then "true"
  token-input = [#ui/token-input current token]
  (_, new) = gather/previous[for: (token.sort token) per: token-input from: (current.sort current)]
commit
  token-input.current := new
end
~~~



Todo:
- [x] Toggle
- [x] List
- [x] Dropdown
  - [x] *bug* commit removal not working for enter / click (blurs list -> closes dropdown)
  - [x] *bug* gather/bottom filtering randomly (always includes correct answer + optionally any others in set).
- [ ] Tab Box
- [ ] Rewrite AC on Dropdown
  - input
  - list (navigable)
- [ ] container
  - card
- [ ] progress
- [ ] Tree
- [ ] chip
- [ ] date picker
- [ ] time picker
- [ ] dialog
