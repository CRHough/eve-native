# UI

## Deprecation Warnings

~~~ eve
search
  [#html/shortcut-tag shortcut tagname]
  not([#ui/shortcut-tag tagname])
bind
  [#ui/deprecated-shortcut-tag shortcut: "ui/{{tagname}}" new-shortcut: shortcut tagname]
end
~~~

Report deprecated shortcuts as warnings.
~~~ eve
search
  [#ui/deprecated-shortcut-tag shortcut: tag new-shortcut tagname]
  element = [tag]
bind
  [#eve/warning #ui/warning #eve/deprecated message: "The shortcut tag '#{{tag}}' for creating basic HTML elements has been deprecated. Instead, use '#{{new-shortcut}}'."]
  element <- [#html/element tagname]
end
~~~

## Shortcut Tags

~~~ eve
commit
  [#ui/shortcut-tag shortcut: "ui/row" tagname: "row"]
  [#ui/shortcut-tag shortcut: "ui/column" tagname: "column"]
  [#ui/shortcut-tag shortcut: "ui/spacer" tagname: "spacer"]
  [#ui/shortcut-tag shortcut: "ui/text" tagname: "text"]
  [#ui/shortcut-tag shortcut: "ui/button" tagname: "button"]
  [#ui/shortcut-tag shortcut: "ui/input" tagname: "input"]
end
~~~

Decorate shortcut elements as html.
~~~ eve
search
  [#ui/shortcut-tag shortcut: tag tagname]
  element = [tag]
bind
  element <- [#html/element tagname]
end
~~~

## List

Decorate list as html.
~~~ eve
search
  list = [#ui/list]
bind
  list <- [#html/element tagname: "div"]
end
~~~

Drop items into list (will eventually be flywheel'd).
~~~ eve
search
  list = [#ui/list item]
bind
  list.children += item
end
~~~

## Selectable

The default cursor for a selectable list is the first item.
~~~ eve
search
  selectable = [#ui/selectable item]
  not(selectable.cursor)
  gather/bottom[for: item.sort per: selectable limit: 1]
commit
  selectable.cursor := item
end
~~~

If the cursor is no longer an item, clear it.
~~~ eve
search
  selectable = [#ui/selectable cursor]
  not(selectable = [#ui/selectable item: cursor])
commit
  selectable.cursor := none
end
~~~

Selectable items are sorted by autosort if they don't specify a sort.
~~~ eve
search
  selectable = [#ui/selectable item]
  sort = if s = item.sort then s else item.eve-auto-index
bind
  item.sort += sort
end
~~~

Build a linked list of the items in the selectable for navigation.
~~~ eve
search
  selectable = [#ui/selectable item]
  (next-sort next) = gather/next[for: (item.sort item) per: selectable]
bind
  item.next-selectable-item += next
  next.prev-selectable-item += item
end
~~~

Mark the currently selected element.
~~~ eve
search
  [#ui/selectable selected]
bind
  selected += #ui/selected
end
~~~

Mark the cursor element.
~~~ eve
search
  [#ui/selectable #ui/active cursor]
bind
  cursor += #ui/current
end
~~~

A focused selectable is active.
~~~ eve
search
  selectable = [#ui/selectable #html/focused]
bind
  selectable += #ui/active
end
~~~


### Handlers

If a selectable is focused by the client, indicate that.
~~~ eve
search
  selectable = [#ui/selectable]
  [#html/event/focus element: selectable]
bind
  [#ui/event/activate selectable]
end
~~~

Blurring an active selectable deactivates it.
~~~ eve
// search
//   selectable = [#ui/selectable #ui/active]
//   [#html/event/blur element: selectable]
// bind
//   [#ui/event/deactivate selectable]
end
~~~

Escape or tab in a active selectable deactivates it.
~~~ eve
search
  selectable = [#ui/selectable #ui/active]
  event = if e = [#html/event/key-down key: "escape"] then e
  if e = [#html/event/key-down key: "tab"] then e
  if e = [#html/event/key-down key: "enter"] then e
bind
  [#ui/event/deactivate selectable]
end
~~~

Clicking an item in a selectable selects the item and activates the selectable.
~~~ eve
search
  selectable = [#ui/selectable item]
  [#html/event/click element: item]
bind
  [#ui/event/select selectable item]
  [#ui/event/activate selectable]
end
~~~

Clicking outside an active selectable deactivates it.
@FIXME: This just won't work :(
~~~ eve
// search
//   selectable = [#ui/selectable #ui/active]
//   [#html/event/click]
//   not(container = if c = selectable.container then c else selectable
//       [#html/event/click element: container])
// bind
//   [#ui/event/deactivate selectable]
// end
~~~

Enter in a active selectable selects its cursor.
~~~ eve
search
  selectable = [#ui/selectable #ui/active cursor:item]
  [#html/event/key-down key: "enter"]
bind
  [#ui/event/select selectable item]
end
~~~

Down in a active selectable advances the cursor.
~~~ eve
search
  selectable = [#ui/selectable #ui/active cursor]
  event = [#html/event/key-down key: "down"]
commit
  selectable.cursor := cursor.next-selectable-item
end
~~~

Up in a active selectable retreats the cursor.
~~~ eve
search
  selectable = [#ui/selectable #ui/active cursor]
  [#html/event/key-down key: "up"]
commit
  selectable.cursor := cursor.prev-selectable-item
end
~~~


### Events

Activating a selectable marks it active.
~~~ eve
search
  event = [#ui/event/activate selectable]
commit
  selectable += #ui/active
  event := none
end
~~~

Deactivating a selectable removes its active status.
~~~ eve
search
  event = [#ui/event/deactivate selectable]
commit
  selectable -= #ui/active
  event := none
end
~~~

Selecting an element updates the selected and cursor.
~~~ eve
search
  event = [#ui/event/select selectable item]
commit
  selectable.selected += item
  selectable.cursor := item
  event := none
end
~~~

In a single-selectable selectable, selection overwrites the previous selected.
~~~ eve
search
  event = [#ui/event/select selectable item]
  selectable = [#ui/single-selectable]
commit
  selectable.selected := item
end
~~~

Clearing a selectable clears its selected.
~~~ eve
search
  event = [#ui/event/clear selectable]
commit
  selectable.selected := none
  event := none
end
~~~


### Dropdown

Decorate dropdown as html.
~~~ eve
search
  dropdown = [#ui/dropdown]
bind
  dropdown <- [#html/element tagname: "div"]
end
~~~

A dropdown's first child is its input.
~~~ eve
search
  dropdown = [#ui/dropdown input]
bind
  dropdown.children += input
  input.sort += 1
end
~~~

A dropdown creates a selectable list of its items.
~~~ eve
search
  dropdown = [#ui/dropdown item]
bind
  dropdown.children += [#ui/dropdown/list #ui/list #ui/selectable #ui/single-selectable dropdown container: dropdown sort: 999999 | item]
end
~~~

A dropdown's selected is its list's
~~~ eve
search
  [#ui/dropdown/list dropdown selected]
bind
  dropdown.selected += selected
end
~~~


### Handlers

Clicking a dropdown opens it.
~~~ eve
search
  dropdown = [#ui/dropdown]
  not(dropdown = [#ui/open])
  [#html/event/click element: dropdown]
bind
  [#ui/event/open dropdown]
end
~~~

Clicking anywhere outside an open dropdown closes it.
~~~ eve
search
  dropdown = [#ui/dropdown #ui/open]
  [#html/event/click]
  not([#html/event/click element: dropdown])
bind
  [#ui/event/close dropdown]
end
~~~

Deactivating a dropdown's list closes it.
~~~ eve
search
  [#ui/event/deactivate selectable: [#ui/dropdown/list dropdown]]
bind
  [#ui/event/close dropdown]
end
~~~

Activating the list of a closed dropdown opens it.
~~~ eve
search
  [#ui/event/activate selectable: [#ui/dropdown/list dropdown]]
  not(dropdown = [#ui/open])
bind
  [#ui/event/open dropdown]
end
~~~

Selecting an item from the dropdown list dispatches a select on the dropdown.
~~~ eve
search
  [#ui/event/select item selectable: [#ui/dropdown/list dropdown]]
bind
  [#ui/event/select dropdown item]
end
~~~


### Events

Opening a button-based dropdown blurs the button.
~~~ eve
search
  [#ui/event/open dropdown]
  list = [#ui/dropdown/list dropdown]
  dropdown.input.tagname = "button"
commit
  dropdown.input += #html/trigger/blur
end
~~~

Opening a dropdown marks it open and activates its selectable.
~~~ eve
search
  event = [#ui/event/open dropdown]
commit
  dropdown += #ui/open
  event := none
end
~~~

~~~ eve
search
  event = [#ui/event/open dropdown]
  list = [#ui/dropdown/list dropdown]
bind
  [#ui/event/activate selectable: list]
end
~~~

Closing a dropdown removes its open tag and deactivates its selectable.
~~~ eve
search
  event = [#ui/event/close dropdown]
commit
  dropdown -= #ui/open
  event := none
end
~~~

~~~ eve
search
  event = [#ui/event/close dropdown]
  list = [#ui/dropdown/list dropdown]
bind
  [#ui/event/deactivate selectable: list]
end
~~~


Clearing a dropdown clears it's selectable.
~~~ eve
search
  [#ui/event/clear dropdown]
  list = [#ui/dropdown/list dropdown]
bind
  [#ui/event/clear selectable: list]
end
~~~

~~~ eve
search
  event = [#ui/event/clear dropdown]
commit
  event := none
end
~~~


## Buttons

Give button elements icons if specified.
~~~ eve
search
  element = [#ui/button icon]
bind
  element.class += "iconic"
  element.class += "ion-{{icon}}"
end
~~~

## Toggle

A toggle is a checkbox and a label decorated as a toggle switch.
~~~ eve
search
  element = [#ui/toggle]
bind
  element <- [#html/div children:
    [#html/element tagname: "label" for: "ui-toggle-{{element}}"]
    [#html/input #ui/toggle/input type: "checkbox" id: "ui-toggle-{{element}}"]]
end
~~~

Copy checked from input to toggle.
~~~ eve
search
  element = [#ui/toggle children: [#ui/toggle/input checked]]

bind
  element.checked += checked
end
~~~

Copy initial from toggle to input.
~~~ eve
search
  element = [#ui/toggle initial children: input]
  input = [#ui/toggle/input]

bind
  input.initial += initial
end
~~~


## Autocomplete

### Setup

Decorate autocompletes.
~~~ eve
search
  autocomplete = [#ui/autocomplete]
bind
  autocomplete <- [#ui/dropdown input:
    [#ui/input #ui/autocomplete/input autocomplete]]
end
~~~

Copy input placeholder.
~~~ eve
search
  input = [#ui/autocomplete/input autocomplete]
bind
  input.placeholder += autocomplete.placeholder
end
~~~

Copy input initial.
~~~ eve
search
  input = [#ui/autocomplete/input autocomplete]
bind
  input.initial += autocomplete.initial
end
~~~

An autocomplete's value is its input's.
~~~ eve
search
  input = [#ui/autocomplete/input autocomplete]
  value = if v = input.value then v else ""
bind
  autocomplete.value += value
end
~~~


### Logic

If an autocomplete's value disagrees with its selected, clear the selected.
~~~ eve
search
  autocomplete = [#ui/autocomplete value: term selected]
  selected.text != term
commit
  [#ui/event/clear dropdown: autocomplete]
end
~~~

Completions that match the current input value are matches, sorted by length.
~~~ eve
search
  autocomplete = [#ui/autocomplete value: term completion]
  ix = string/index-of[text: completion.text substring: string/lowercase[text: term]]
  sort = string/length[text: completion.text]
bind
  autocomplete.item += completion
  completion.sort += "{{sort}}{{completion.text}}"
end
~~~

### Handlers

If the value matches perfectly on blur, select that match.
~~~ eve
search
  input = [#ui/autocomplete/input autocomplete]
  [#html/event/blur element: input value]
  match = autocomplete.item
  lower = string/lowercase[text: match.text]
  lower = string/lowercase[text: value]
bind
  [#ui/event/select autocomplete selected: match]
end
~~~

Focusing the autocomplete opens the dropdown.
~~~ eve
search
  input = [#ui/autocomplete/input autocomplete]
  [#html/event/focus element: input]
bind
  [#ui/event/open dropdown: autocomplete]
end
~~~

Blurring the autocomplete closes the dropdown.
~~~ eve
// search
//   input = [#ui/autocomplete/input autocomplete]
//   [#html/event/blur element: input]
// bind
//   [#ui/event/close dropdown: autocomplete]
// end
~~~

Closing an autocomplete's dropdown blurs it.
~~~ eve
search
  [#ui/event/close dropdown: autocomplete]
  autocomplete = [#ui/autocomplete input]
commit
  input += #html/trigger/blur
end
~~~

Selecting an item from the dropdown dispatches a select on the autocomplete.
~~~ eve
search
  autocomplete = [#ui/autocomplete]
  [#ui/event/select item dropdown: autocomplete]
bind
  [#ui/event/select autocomplete item]
end
~~~

Autocompletes not marked `#ui/advanced` will update their values on select.
~~~ eve
search
  autocomplete = [#ui/autocomplete input]
  [#ui/event/select item dropdown: autocomplete]
commit
  input.value := item.text
end
~~~


### Events

Clear the specified autocomplete.
~~~ eve
search
  event = [#ui/event/clear autocomplete]
  input = [#ui/autocomplete/input autocomplete]
commit
  input.value := none
  [#ui/event/clear dropdown: autocomplete]
  event := none
end
~~~

When an autocomplete is opened, store its previous value.
~~~ eve
search
  event = [#ui/event/open autocomplete]
  input = [#ui/autocomplete/input autocomplete]
  value = if v = input.value then v else ""
commit
  autocomplete.open := "true"
  autocomplete.previous := value
  event := none
end
~~~

When an autocomplete is closed, erase its previous value.
~~~ eve
search
  event = [#ui/event/close autocomplete]
  input = [#ui/autocomplete/input autocomplete]
commit
  autocomplete.open := none
  autocomplete.previous := none
  input += #html/trigger/blur
  event := none
end
~~~

When an autocomplete is closed and its value is changed, emit a change event.
~~~ eve
search
  event = [#ui/event/close autocomplete]
  autocomplete.value != autocomplete.previous
commit
  [#ui/event/change autocomplete value: autocomplete.value]
end
~~~

When a selection is made that differs from the previous value, emit a change event.
~~~ eve
search
  event = [#ui/event/select autocomplete selected]
  selected.text != autocomplete.previous
commit
  [#ui/event/change autocomplete value: selected.text]
end
~~~

Clear the autocomplete change event.
~~~ eve
search
  event = [#ui/event/change autocomplete]
commit
  event := none
end
~~~




Todo:
- [x] Toggle
- [x] List
- [x] Dropdown
  - [x] *bug* commit removal not working for enter / click (blurs list -> closes dropdown)
  - [x] *bug* gather/bottom filtering randomly (always includes correct answer + optionally any others in set).
- [ ] Tab Box
- [ ] Rewrite AC on Dropdown
  - input
  - list (navigable)
- [ ] container
  - card
- [ ] progress
- [ ] Tree
- [ ] chip
- [ ] date picker
- [ ] time picker
- [ ] dialog
