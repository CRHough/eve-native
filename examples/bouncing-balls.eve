# Clock

Create a timer that will tick once per second.
```
commit
  [#world tick: 0]
  [#time #system/timer resolution: 33.333333333]
end
```

Create a canvas element
```
commit
  [#canvas/root #screen width: 500 height: 500 style:
    [width: "500px" height: "500px" background-color: "rgb(226, 79, 94)" display: "block"]]
end
```

@TODO: Implement math/range[]... :P
~~~ eve
commit
  [#range | ix: (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40)]
end
~~~



Create our boids
```
search
  not([#init])
  [#range ix: order]
  x = order * 23
  y = order * 17
  vx = random/number[seed: order] * 3 + 1
  vy = random/number[seed: order + 2] * 4 + 1
commit
  [#boid order x y vx vy]
  [#init]
end
```

Update
```
search
  boid = [#boid x > 490]
  boid.vx > 0

commit
  boid.vx := boid.vx * -0.9
end
```

```
search
  boid = [#boid y > 490]
  boid.vy > 0

commit
  boid.vy := boid.vy * -0.9
end
```

```
search
  boid = [#boid x < 10]
  boid.vx < 0

commit
  boid.vx := boid.vx * -0.9
end
```

```
search
  boid = [#boid y < 10]
  boid.vy < 0

commit
  boid.vy := boid.vy * -0.9
end
```

```
search
  [#time tick]
  world = [#world]
  world.tick != tick
  boid = [#boid x y vx vy]

commit
  world.tick := tick
  boid.x := x + vx
  boid.y := y + vy
  boid.vy := vy + 0.05
end
```

Display
```
search
  screen = [#screen]
  boid = [#boid x y]

bind
  screen.children += [#canvas/path sort: boid.order | children:
    [type: "arc" sort: 1 x: x y: y radius: 5 startAngle: 0 endAngle: 2 * 3.14]]
end
```
