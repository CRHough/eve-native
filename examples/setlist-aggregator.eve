# Setlist Aggregator


This app takes a set of concerts, and accesses the setlist.fm api to retrieve
the setlist that was played at that concert. This is cross-referenced with
the MS Groove API to create playlists for those concerts.

The app configuration

commit
  [#setlist-app groove: [#groove client-id: "1efe0909-4134-4740-96e6-dfb02ac095ba" client-secret: "UskJMTfCRNffOLbuBnGSBb2" endpoint: "https://music.xboxlive.com" redirect-uri: "http://localhost:8081"]
                setlist-fm: [#setlist-fm api-key: "f6c6164c-e52f-4aa5-bd22-1c76b208d275" endpoint: "https://api.setlist.fm/rest"]]
end


# Groove API

The groove API is configured with a record tagged `#groove` with the following shape:

`[#groove client-id client-secret endpoint redirect-uri]`


## Logging Into Groove

Commit a `#groove/login` to initiate the login process. This redirects to a 
login portal, which asks the user to authorize access to Eve. Once the user
grants access, the browser is redirect back to the supplied `redirect-uri`.

search
  [#groove/login]
  [#groove client-id client-secret redirect-uri]
  response-type = "token"
  scopes = string/url-encode[text: "MicrosoftMediaServices.GrooveApiAccess offline_access"]
  encoded-redirect-uri = string/url-encode[text: redirect-uri]
  address = "https://login.live.com/oauth20_authorize.srf/?client_id={{client-id}}&response_type={{response-type}}&redirect_uri={{encoded-redirect-uri}}&scope={{scopes}}"
commit
  [#html/redirect url: address]
end

A successful login will return to the app an access token

search
  [#html/url query: [#html/url/query key: "access_token" value: access-token]]
  groove = [#groove]
commit
  groove.access-token := access-token
end


## Getting Groove User Data

With an access token in hand, we can use that to get user-specific information.

search
  [#groove/get-user]
  [#groove access-token endpoint]
commit
  [#http/request #groove-profile address: "{{endpoint}}/1/user/music/profile" method: "GET" headers: 
    [#http/header key: "Authorization" value: "Bearer  {{access-token}}"]]
end

search
  [#groove-profile response]
commit
  [#json/decode #groove-profile json: response.body]
end

Create a Groove user from the response

search
  [#groove-profile json-object: profile]
commit
  [#groove/user region: profile.Culture subscription: profile.HasSubscription]
end


## Search Groove

search
  [#groove/search-track query]
  [#groove access-token endpoint]
  artist = string/replace[text: query replace: " " with: "+"]
  address = "{{endpoint}}/1/content/music/search?q={{query}}&filters=tracks"
commit
  [#http/request #groove-search address headers: 
    [#http/header key: "Authorization" value: "Bearer {{access-token}}"]]
end

search
  [#groove-search response: [body]]
commit
  [#json/decode #groove-search json: body]
end

search
  [#groove-search json-object]
  track = [Id Name ReleaseDate Duration]
commit
  [#track name: Name groove-id: Id duration: Duration image: track.ImageUrl]
end


## Get a full song strem

search
  [#groove/full-stream track-id]
  [#groove access-token endpoint]
  address = "{{endpoint}}/1/content/{{track-id}}/stream?clientInstanceId=2E19AC92-8600-11E7-8200-4CC9641576C9"
commit  
  [#http/request #groove-get-song track-id address headers: 
    [#http/header key: "Authorization" value: "Bearer {{access-token}}"]]
end

search
  [#groove-get-song track-id response: [body]]
commit
  [#json/decode #groove-get-song track-id json: body]
end

search
  [#groove-get-song track-id json-object]
  groove-stream = [#groove/full-stream track-id]
commit
  groove-stream <- [stream: json-object.Url content-type: json-object.ContentType]
end



# The User Interface

Logging in is kicked off by clicking the login button.

search
  not([#groove/user])
bind
  [#ui/button #groove-login text: "Login to Groove"]
end

search
  [#html/event/click element: [#groove-login]]
commit
  [#groove/login]
end

When we've gotten an access token, we get get the user profile.

search
  [#groove access-token]
commit
  [#groove/get-user]
end

## Searching for tracks

commit
  [#html/div children: 
    [#ui/input #track-search]
    [#ui/button #track-search/button text: "Search"]]
end

search
  [#track-search value]
  [#html/event/click element: [#track-search/button]]
commit
  [#groove/search-track query: value]
end

search
  track = [#track name image duration]
bind
  [#html/div track children:
    [#html/img track src: image style: [width: "100px" height: "100px"]]
    [#html/div track text: "{{name}} - {{duration}}"]
    [#html/div #stream-control track]
    [#html/button #groove/stream-player/playback-control track text: "Play"]]
end

search
  [#html/event/click element: [#play-track track]]
  track = [#track groove-id]
  app = [#setlist-app]
commit
  app.playing := track
  [#groove/full-stream track-id: groove-id]
end

search
  [#groove/full-stream track-id stream content-type]
  track = [#track groove-id: track-id]
commit
  track.stream := stream
  track.content-type := content-type
end

search
  stream-div = [#stream-control track]
  [#setlist-app playing]
  track = playing
commit
  [#html/div text: "Hello World"]
  //stream-div.children += [#html/stream #groove/stream-player track play: "true" controls: "true" source: track.stream type: track.content-type]
end

search
  [#html/event/click element: control]
  control = [#groove/stream-player/playback-control track]
  player = [#groove/stream-player track]
  (play, text) = if player = [play: "true"] then ("false","Play")
                 if player = [play: "false"] then ("true","Pause")
                 else ("true","Pause")
commit
  player.play := play
  control.text := text
end



## Get Data From Setlist.fm

disabled
search
  //[#setlist-app access-token setlist-endpoint]
  //address = "{{setlist-endpoint}}/v1/search?q=incubus+glitterbomb+8&type=track"
commit
  //[#http/request #search-setlist address headers: 
      //[#http/header key: "Authorization" value: "Bearer {{access-token}}"]
      //[#http/header key: "Accept" value: "application/json"]]
end

search
  [#search-setlist response: [body]]
commit
  [#json/decode #search-setlist json: body]
end

search
  [#search-setlist json-object: spotsearch]
  track-id = spotsearch.tracks.items.value.id
commit
  [#html/div text: track-id] 
end

## seasrch setlist.fm

//search
  [#disable]
  //address = "{{setlist-endpoint}}/1.0/search/artists?artistName={{artist}}"
  //address = "{{setlist-endpoint}}/1.0/search/setlists?artistName={{artist}}&date=16-08-2017&p=1"
//commit
  //[#http/request #setlist-fm artist: value, address headers: 
      //[#http/header key: "x-api-key" value: setlist-api-key]
      //[#http/header key: "Accept" value: "application/json"]]
//end




## Misc Diagnostics

search
  [#http/request/error error]
commit
  [#html/div text: error]
end

search
  [#disable]
  [#http/request/finished request]
commit
  [#html/div request text: "***Finished*** {{request}}"]
end

search
  [#disable]
  q = [#http/response body]
commit
  [#html/div text: "THIS IS THE BODY: {{body}}"]
  //[#json/decode json: body]
end

search
  [#disable]
  [#json/decode json-object]
commit
  [#html/div text: "{{json-object.Tracks.Items.value.Name}} {{json-object.Tracks.Items.value.Album.Name}}  - {{json-object.Tracks.Items.value.Id}}"] 
end

search
  request = [#http/request]
  not(request = [#finished])
bind
  [#html/div text: "Processing request..."]
end