# Timeline

First party transaction labels
~~~ eve
commit
  [#editor/transaction-label tagname: "html/event/mouse-down" label: "🖰🡓"]
  [#editor/transaction-label tagname: "html/event/mouse-up" label: "🖰🡑"]
  [#editor/transaction-label tagname: "html/event/click" label: "🖰🡙"]
  [#editor/transaction-label tagname: "html/event/double-click" label: "🖰⇕"]
  [#editor/transaction-label tagname: "html/event/key-down" label: "⌨🡓"]
  [#editor/transaction-label tagname: "html/event/key-up" label: "⌨🡑"]
  [#editor/transaction-label tagname: "html/event/change" label: "✎.."]
  [#editor/transaction-label tagname: "html/event/focus" label: "○"]
  [#editor/transaction-label tagname: "html/event/blur" label: "◌"]
  [#editor/transaction-label tagname: "system/timer/change" label: "⏱"]
end
~~~

## Timeline
~~~ eve
search
  timeline = [#editor/timeline]
bind
  timeline <- [#ui/column children:
      [#ui/column #editor/timeline/scroller]]
end
~~~

Show transactions in the timeline.
~~~ eve
search
  timeline = [#editor/timeline/scroller]
  transaction = [#editor/transaction]
bind
  timeline <- [children: transaction]
end
~~~

## Transaction

A transactions size is it's output count.
~~~ eve
search
  transaction = [#editor/transaction]
  size = if c = gather/count[for: transaction.output per: transaction] then c else 0
bind
  transaction.size += size
end
~~~

Decorate transactions.
~~~ eve
search
  transaction = [#editor/transaction size]
  height = 20 + math/pow[value: size exponent: 0.5] * 12
bind
  transaction <- [#html/div style: [margin-top: "-{{height}}px" height: "{{height}}px"]]
end
~~~

Look for a recognizable tag in the transaction input to label it.
~~~ eve
search
  transaction = [#editor/transaction input: [av: [attribute: "tag" value]]]
  [#editor/transaction-label tagname: value label]
bind
  transaction.text += label
end
~~~

Mark open transactions.
~~~ eve
search
  [#editor/timeline open: transaction]
  transaction = [#editor/transaction]
bind
  transaction += #editor/open
end
~~~

### Handlers

Clicking a transaction opens it.
~~~ eve
search
  timeline = [#editor/timeline]
  transaction = [#editor/transaction]
  [#html/event/click element: transaction]
commit
  timeline.open := transaction
end
~~~

## Transaction Viewer

~~~ eve
search
  timeline = [#editor/timeline open]
bind
  timeline.children += [#editor/transaction-viewer transaction: open]
end
~~~

Decorate transaction viewer.
~~~ eve
search
  viewer = [#editor/transaction-viewer transaction]
bind
  viewer <- [#html/div children:
    [#html/element tagname: "h2" text: "Transaction {{transaction.sort}}"]
    [#html/element tagname: "h3" text: "Inputs"]
    [#html/div #editor/transaction-viewer/inputs class: "editor-transaction-viewer-records" viewer]
    [#html/element tagname: "h3" text: "Outputs"]
    [#html/div #editor/transaction-viewer/outputs class: "editor-transaction-viewer-records" viewer]]
end
~~~

Show transaction inputs as literals.
~~~ eve
search
  viewer = [#editor/transaction-viewer transaction: [input]]
  inputs = [#editor/transaction-viewer/inputs viewer]
bind
  inputs.children += [#facet/record/literal input source: "editor/timeline" | av: input.av]
end
~~~

Show transaction outputs as literals.
~~~ eve
search
  viewer = [#editor/transaction-viewer transaction: [output]]
  outputs = [#editor/transaction-viewer/outputs viewer]
bind
  outputs.children += [#html/div output | children:
    [#ui/button #facet/record/button #editor/transaction-viewer/output/name class: "flat" value: output.entity]
    [#facet/record/literal output source: "editor/timeline" | av: output.av]]
end
~~~

Decorate output with client-name, if available.
~~~ eve
search
  output = [#editor/transaction-viewer/output/name value: entity]
  [#editor/explorer/client-name entity name]
bind
  output.name += name
end
~~~

### Handlers

Clicking outside a transaction viewer closes it.
~~~ eve
search
  [#html/event/click]
  timeline = [#editor/timeline]
  viewer = [#editor/transaction-viewer transaction]
  not([#html/event/click element: viewer])
commit
  timeline.open -= transaction
end
~~~


## Transaction Saving

The next transaction is the current transaction's sort + 1
~~~ eve
search
  timeline = [#editor/timeline]
  next = if [#editor/transaction sort] gather/top[for: sort limit: 1] then sort + 1 else 1
bind
  timeline.next-transaction += next
end
~~~

Save client transactions permanently.
~~~ eve
search
  [#editor/timeline next-transaction: sort]
  [#editor/event/meta-transaction]
commit
  [#editor/transaction sort]
end
~~~

Save transaction inputs.
~~~ eve
search
  [#editor/timeline next-transaction: sort]
  [#editor/event/meta-transaction input]
commit
  [#editor/transaction sort | input]
end
~~~

Save transaction outputs.
~~~ eve
search
  [#editor/timeline next-transaction: sort]
  [#editor/event/meta-transaction output]
commit
  [#editor/transaction sort | output]
end
~~~

Throw away old transactions.
~~~ eve
search
  transaction = [#editor/transaction]
  gather/top[for: transaction.sort limit: 25]
bind
  transaction += #editor/keep-alive
end
~~~

Open transactions are also kept alive.
~~~ eve
search
  [#editor/timeline open: transaction]
  transaction = [#editor/transaction]
bind
  transaction += #editor/keep-alive
end
~~~

Nuke dead transactions.
~~~ eve
search
  transaction = [#editor/transaction]
  not(transaction = [#editor/keep-alive])
commit
  transaction := none
end
~~~

Nuke their inputs.
~~~ eve
search
  transaction = [#editor/transaction input]
  not(transaction = [#editor/keep-alive])
  av = input.av
commit
  input := none
  av := none
end
~~~

Nuke their outputs.
~~~ eve
search
  transaction = [#editor/transaction output]
  not(transaction = [#editor/keep-alive])
  av = output.av
commit
  output := none
  av := none
end
~~~

## Pause

~~~ eve
search
  pause-client = [#editor/timeline/pause-client]
bind
  pause-client <- [#ui/toggle class: "square"]
end
~~~

### Exports

~~~ eve
search
  pause = [#editor/timeline/pause-client checked]
watch editor/host
  ("pause")
end
~~~
