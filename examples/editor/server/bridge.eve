# DB Explorer Bridge

# Client Import

## General Data

Import data invariant to current editor state.

### Client Records

Store client records.
~~~ eve
search
  lookup-remote[for: "all-records" attribute: "record" value: record type: "add"]
commit
  [#editor/explorer/client-record value: record]
end
~~~

Nuke old client records.
~~~ eve
search
  lookup-remote[for: "all-records" attribute: "record" value: record type: "remove"]
  rec = [#editor/explorer/client-record value: record]
commit
  rec := none
end
~~~

### Client Tags

Store client tags.
~~~ eve
search
  lookup-remote[for: "all-tags" attribute: "tagname" value: tagname type: "add"]
commit
  [#editor/explorer/client-tag value: tagname]
end
~~~

Nuke old client tags.
~~~ eve
search
  lookup-remote[for: "all-tags" attribute: "tagname" value: tagname type: "remove"]
  rec = [#editor/explorer/client-tag value: tagname]
commit
  rec := none
end
~~~


### Client Attributes

Store client attributes.
~~~ eve
search
  lookup-remote[for: "all-attributes" attribute: "attribute" value: attribute type: "add"]
commit
  [#editor/explorer/client-attribute value: attribute]
end
~~~

Nuke old client attributes.
~~~ eve
search
  lookup-remote[for: "all-attributes" attribute: "attribute" value: attribute type: "remove"]
  rec = [#editor/explorer/client-attribute value: attribute]
commit
  rec := none
end
~~~

### Client Names

Store client names.
~~~ eve
search
  lookup-remote[for: "all-names" entity attribute: "name" value: name type: "add"]
commit
  [#editor/explorer/client-name entity name]
end
~~~

Nuke old client names.
~~~ eve
search
  lookup-remote[for: "all-names" entity attribute: "name" value: name type: "remove"]
  rec = [#editor/explorer/client-name entity name]
commit
  rec := none
end
~~~

## Completions

Import completion data (resulting from completion blocks generated by the editor and sent to the client).

### Completer Generation

Find records that match the current completer pattern.
When the completion pattern has at least one attribute, create a completer block.
~~~ eve
search
  [#editor/explorer/query pattern]
  pattern.av
bind
  record-var = [#eve/compiler/variable name: "record" pattern]
  attr-var = [#eve/compiler/variable name: "attribute" pattern]
  val-var = [#eve/compiler/variable name: "value-unused" pattern]
  tag-var = [#eve/compiler/variable name: "tag" pattern]
  program-var = [#eve/compiler/variable name: "editor-program"]
  editor-var = [#eve/compiler/variable name: "editor-name"]
  [#eve/compiler/block #editor/explorer/completer type: "bind" | editor-var record-var constraint:
    [#eve/compiler/scan entity: program-var attribute: "tag" value: "editor/program"]
    [#eve/compiler/scan entity: program-var attribute: "name" value: editor-var]
    [#eve/compiler/scan entity: record-var attribute: attr-var value: val-var]
    [#eve/compiler/scan entity: record-var attribute: "tag" value: tag-var] // @FIXME: This won't work on records with no tags **********
    [#eve/compiler/remote-output to: editor-var for: "completion-record" entity: pattern attribute: "record" value: record-var]
    [#eve/compiler/remote-output to: editor-var for: "completion-tag" entity: pattern attribute: "value" value: tag-var]
    [#eve/compiler/remote-output to: editor-var for: "completion-attribute" entity: pattern attribute: "value" value: attr-var]]
end
~~~

Fully formed AVs translate into eAV scans.
~~~ eve
search
  [#editor/explorer/query pattern: [av: [attribute value]]]
  block = [#editor/explorer/completer record-var]
bind
  block <- [constraint: [#eve/compiler/scan entity: record-var attribute value]]
end
~~~

AVs with only an A translate into eAv scans.
~~~ eve
search
  [#editor/explorer/query pattern]
  pattern = [av]
  not(av.value)
  block = [#editor/explorer/completer record-var editor-var]
bind
  value-var = [#eve/compiler/variable pattern av]
  block <- [constraint:
    [#eve/compiler/scan entity: record-var attribute: av.attribute value: value-var]
    [#eve/compiler/remote-output to: editor-var for: "completion-record-av" entity: record-var attribute: av.attribute value: value-var]]
end
~~~

### Completion Records

Dump completion records into the editor.
~~~ eve
search
  lookup-remote[for: "completion-record" entity: pattern attribute: "record" value: record type: "add"]
commit
  [#editor/explorer/completion-record pattern record]
end
~~~

Nuke old completion records.
~~~ eve
search
  lookup-remote[for: "completion-record" entity: pattern attribute: "record" value: record type: "remove"]
  completion = [#editor/explorer/completion-record pattern record]
commit
  completion := none
end
~~~

### Completion Tags

Dump completion tags into the editor.
~~~ eve
search
  lookup-remote[for: "completion-tag" entity: pattern attribute: "value" value: tag type: "add"]
commit
  [#editor/explorer/completion-tag pattern value: tag]
end
~~~

Nuke old completion tags.
~~~ eve
search
  lookup-remote[for: "completion-tag" entity: pattern attribute: "value" value: tag type: "remove"]
  completion = [#editor/explorer/completion-tag pattern value: tag]
commit
  completion := none
end
~~~

### Completion Attributes

Dump completion attributes into the editor.
~~~ eve
search
  lookup-remote[for: "completion-attribute" entity: pattern attribute: "value" value: attribute type: "add"]
commit
  [#editor/explorer/completion-attribute pattern value: attribute]
end
~~~

Nuke old completion attributes.
~~~ eve
search
  lookup-remote[for: "completion-attribute" entity: pattern attribute: "value" value: attribute type: "remove"]
  completion = [#editor/explorer/completion-attribute pattern value: attribute]
commit
  completion := none
end
~~~

### Completion AVs

Dump completion AVs into the editor.
~~~ eve
search
  lookup-remote[for: "completion-record-av" entity: record attribute value type: "add"]
  completion-record = [#editor/explorer/completion-record record]
commit
  completion-record.av += [record attribute value]
end
~~~

Nuke old completion AVs.
~~~ eve
search
  lookup-remote[for: "completion-record-av" entity: record attribute value type: "remove"]
  completion-record = [#editor/explorer/completion-record record av]
  av = [attribute value]
commit
  completion-record.av -= av
  av := none
end
~~~


## Open Records

Import information about "open" records in the editor, for the purpose of diplaying record cards.

### Opener Generation

Retrieve all the AVs for open records and send them to the editor.
~~~ eve
search
  root = [#editor/explorer/root open: record]
bind
  attr-var = [#eve/compiler/variable name: "attribute"]
  val-var = [#eve/compiler/variable name: "value"]
  program-var = [#eve/compiler/variable name: "editor-program"]
  editor-var = [#eve/compiler/variable name: "editor-name"]
  [#eve/compiler/block #editor/explorer/open-record type: "bind" record | constraint:
    [#eve/compiler/scan entity: program-var attribute: "tag" value: "editor/program"]
    [#eve/compiler/scan entity: program-var attribute: "name" value: editor-var]
    [#eve/compiler/scan entity: record attribute: attr-var value: val-var]
    [#eve/compiler/remote-output to: editor-var for: "open-record" entity: record attribute: "tag" value: "db-explorer/open-record"]
    [#eve/compiler/remote-output to: editor-var for: "open-record-av" entity: record attribute: attr-var value: val-var]]
end
~~~


### Record Entity

When a record is opened, create an exploded representation of it.
~~~ eve
search
  lookup-remote[for: "open-record" entity attribute: "tag" value: "db-explorer/open-record" type: "add"]
commit
  [#editor/explorer/client-open-record record: entity]
end
~~~

Nuke old open records.
~~~ eve
search
  lookup-remote[for: "open-record" entity attribute: "tag" value: "db-explorer/open-record" type: "remove"]
  open-rec = [#editor/explorer/client-open-record record: entity]
commit
  open-rec := none
end
~~~

### Record AVs

Dump open record AVs into their exploded record.
~~~ eve
search
  lookup-remote[for: "open-record-av" entity attribute value type: "add"]
  open-record = [#editor/explorer/client-open-record record: entity]
commit
  open-record.av += [attribute value]
end
~~~

Nuke old open record AVs.
~~~ eve
search
  lookup-remote[for: "open-record-av" entity attribute value type: "remove"]
  open-record = [#editor/explorer/client-open-record record: entity av]
  av = [attribute value]
commit
  open-record.av -= av
end
~~~
