# Explorer

## Root

~~~ eve
search
  root = [#editor/explorer/root]
bind
  root <- [#ui/column children:
    [#ui/row #editor/explorer/query-box | children:
      [#ui/token-completer #editor/explorer/query placeholder: "search..." | completion-pattern: [#editor/explorer/pattern]]
      [#ui/button #editor/explorer/query-button icon: "ios-search-strong"]]
    [#ui/row #editor/explorer/symbol-list]
    [#ui/row #editor/explorer/card-list]]
end
~~~

Draw each matching record as a record symbol.
~~~ eve
search
  [#editor/explorer/root record]
  symbol-list = [#editor/explorer/symbol-list]
bind
  symbol-list.children += [#editor/explorer/record-symbol record]
end
~~~

Otherwise, show the completion records.
~~~ eve
search
  root = [#editor/explorer/root]
  [#editor/explorer/completion-record record]
bind
  root.record += record
end
~~~


## Record Symbol

~~~ eve
search
  symbol = [#editor/explorer/record-symbol record]
  title = if [#editor/explorer/client-name entity: record name: t] then t else "Untitled"
bind
  symbol <- [#ui/button class: "flat" record sort: record text: title]
end
~~~

Clicking a record symbol opens its card.
~~~ eve
search
  [#html/event/click element: [#editor/explorer/record-symbol record]]
  root = [#editor/explorer/root]
commit
  // root.open += record // @FIXME: Why doesn't this work if we do + and -
  root.open := record
end
~~~

## Record Card

If a record is open, inject its card.
~~~ eve
search
  root = [#editor/explorer/root open: record]
  [#editor/explorer/client-open-record record av]
  card-list = [#editor/explorer/card-list]
bind
  card-list.children +=
  [#facet/record/card #editor/explorer/card source: "editor/explorer" sort: record entity: record | av]
end
~~~


### Events

Clicking a record button in a card opens its card too.
~~~ eve
search
  [#html/event/click element: [#facet/record/button value]]
  root = [#editor/explorer/root]
commit
  root.open := value
end
~~~

Clicking a tag button in a card adds that tag to the query.
~~~ eve
search
  [#html/event/click element: [#facet/tag/button text]]
  root = [#editor/explorer/root]
  query = [#ui/token-completer #editor/explorer/query item]
  item.text = "#{{text}}"
bind
  [#ui/event/select element: query item]
end
~~~


## Search

### Completions

Add tag completions to queries with no existing filters.
~~~ eve
search
  query = [#editor/explorer/query]
  not(string/contains[text: query.value substring: " "])
  [#editor/explorer/client-tag value: tag]
bind
  query.completion += [value: tag text: "#{{tag}}"]
end
~~~

Add attribute completions to queries with no existing filters.
~~~ eve
search
  query = [#editor/explorer/query]
  not(string/contains[text: query.value substring: " "])
  [#editor/explorer/client-attribute value: attribute]
bind
  query.completion += [value: attribute text: attribute]
end
~~~

Add tags that match possible completions.
~~~ eve
search
  query = [#editor/explorer/query completion-pattern]
  [#editor/explorer/completion-record record]
  [#editor/explorer/completion-tag record value: tag]
  not(completion-pattern.attribute = [attribute: "tag" value: tag])
bind
  query.completion += [value: tag text: "#{{tag}}"]
end
~~~

Add tags that match possible completions.
~~~ eve
search
  query = [#editor/explorer/query]
  [#editor/explorer/completion-record record]
  [#editor/explorer/completion-attribute record value: attribute]
  not(completion-pattern.attribute = [attribute])
bind
  query.completion += [value: attribute text: attribute]
end
~~~

### Token Parsing

If multiple tokens exist, assume all but the last are fully formed tags or attributes to filter upon.
~~~ eve
search
  query = [#editor/explorer/query completion-pattern token last-ix]
  token.ix != last-ix

bind
  [#editor/explorer/tokens-to-pattern pattern: completion-pattern token: token.token]
end
~~~

`#editor/explorer/tokens-to-pattern` attaches AVs to the records attribute for each token.

If the token starts with `#`, it's a tag.
~~~ eve
search
  [#editor/explorer/tokens-to-pattern pattern token]
  1 = string/index-of[text: token substring: "#"]
  value = string/substring[text: token from: 2 to: 0]
bind
  pattern.attribute += [attribute: "tag" value]
end
~~~

If the token doesn't start with `#`, it's an attribute.
~~~ eve
search
  [#editor/explorer/tokens-to-pattern pattern token]
  not(1 = string/index-of[text: token substring: "#"])
  token != ""
bind
  pattern.attribute += [attribute: token]
end
~~~


# DEBUG
